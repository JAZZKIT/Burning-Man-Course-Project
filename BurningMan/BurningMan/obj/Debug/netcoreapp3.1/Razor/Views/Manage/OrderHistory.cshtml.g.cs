#pragma checksum "D:\Dev\Web\Burning-Man-Course-Project\BurningMan\BurningMan\Views\Manage\OrderHistory.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "bfa3e9cf3a43b4935a35bbf3cbf768f9da105b8e"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Manage_OrderHistory), @"mvc.1.0.view", @"/Views/Manage/OrderHistory.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\Dev\Web\Burning-Man-Course-Project\BurningMan\BurningMan\Views\_ViewImports.cshtml"
using BurningMan;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Dev\Web\Burning-Man-Course-Project\BurningMan\BurningMan\Views\_ViewImports.cshtml"
using BurningMan.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"bfa3e9cf3a43b4935a35bbf3cbf768f9da105b8e", @"/Views/Manage/OrderHistory.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"ef3710c8916bea6cc00362f60f6602f9b7219de7", @"/Views/_ViewImports.cshtml")]
    public class Views_Manage_OrderHistory : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<List<BurningMan.Models.Order>>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("translate", new global::Microsoft.AspNetCore.Html.HtmlString("no"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 3 "D:\Dev\Web\Burning-Man-Course-Project\BurningMan\BurningMan\Views\Manage\OrderHistory.cshtml"
  
    ViewData["Title"] = "OrderHistory";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n<h1 style=\"text-align: center\">Purchase History</h1>\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "bfa3e9cf3a43b4935a35bbf3cbf768f9da105b8e3815", async() => {
                WriteLiteral(@"
    <div class=""row"">
        <div id=""admin"" class=""col s12"">
            <div class=""card material-table"">
                <div class=""table-header"">
                    <span class=""table-title"">Material Datatable</span>
                    <div class=""actions"">
                        <a href=""#add_users"" class=""modal-trigger waves-effect btn-flat nopadding""><i class=""material-icons"">person_add</i></a>
                        <a href=""#"" class=""search-toggle waves-effect btn-flat nopadding""><i class=""material-icons"">search</i></a>
                    </div>
                </div>
                <div id=""datatable_wrapper"" class=""dataTables_wrapper no-footer"">
                    <div class=""hiddensearch""><div id=""datatable_filter"" class=""dataTables_filter""><label><input type=""search"" class=""form-control input-sm"" placeholder=""Enter Keywords Here"" aria-controls=""datatable""></label></div></div><table id=""datatable"" class=""dataTable no-footer"" role=""grid"" aria-describedby=""datatable_info"">
   ");
                WriteLiteral(@"                     <thead>
                            <tr role=""row"">
                                <th class=""sorting_asc"" tabindex=""0"" aria-controls=""datatable"" rowspan=""1"" colspan=""1"" aria-sort=""ascending"" aria-label=""Name: activate to sort column descending"">Name</th>
                                <th class=""sorting"" tabindex=""0"" aria-controls=""datatable"" rowspan=""1"" colspan=""1"" aria-label=""Position: activate to sort column ascending"">Mail</th>
                                <th class=""sorting"" tabindex=""0"" aria-controls=""datatable"" rowspan=""1"" colspan=""1"" aria-label=""Office: activate to sort column ascending"">Type</th>
                                <th class=""sorting"" tabindex=""0"" aria-controls=""datatable"" rowspan=""1"" colspan=""1"" aria-label=""Age: activate to sort column ascending"">Quantity</th>
                                <th class=""sorting"" tabindex=""0"" aria-controls=""datatable"" rowspan=""1"" colspan=""1"" aria-label=""Start date: activate to sort column ascending"">Order Date</th>
      ");
                WriteLiteral(@"                          <th class=""sorting"" tabindex=""0"" aria-controls=""datatable"" rowspan=""1"" colspan=""1"" aria-label=""Salary: activate to sort column ascending"">Amount</th>
                            </tr>
                        </thead>
                        <tbody>
");
#nullable restore
#line 33 "D:\Dev\Web\Burning-Man-Course-Project\BurningMan\BurningMan\Views\Manage\OrderHistory.cshtml"
                              

                                foreach (var itm in Model)
                                {

#line default
#line hidden
#nullable disable
                WriteLiteral("                                    <tr role=\"row\" class=\"odd\">\r\n                                        <td class=\"sorting_1\">");
#nullable restore
#line 38 "D:\Dev\Web\Burning-Man-Course-Project\BurningMan\BurningMan\Views\Manage\OrderHistory.cshtml"
                                                         Write(itm.Id);

#line default
#line hidden
#nullable disable
                WriteLiteral("</td>\r\n                                        <td>");
#nullable restore
#line 39 "D:\Dev\Web\Burning-Man-Course-Project\BurningMan\BurningMan\Views\Manage\OrderHistory.cshtml"
                                       Write(User.Identity.Name);

#line default
#line hidden
#nullable disable
                WriteLiteral("</td>\r\n                                        <td>Black Desert</td>\r\n                                        <td>");
#nullable restore
#line 41 "D:\Dev\Web\Burning-Man-Course-Project\BurningMan\BurningMan\Views\Manage\OrderHistory.cshtml"
                                       Write(itm.Quantity);

#line default
#line hidden
#nullable disable
                WriteLiteral("</td>\r\n                                        <td>");
#nullable restore
#line 42 "D:\Dev\Web\Burning-Man-Course-Project\BurningMan\BurningMan\Views\Manage\OrderHistory.cshtml"
                                       Write(itm.OrderDateTime);

#line default
#line hidden
#nullable disable
                WriteLiteral("</td>\r\n                                        <td>$");
#nullable restore
#line 43 "D:\Dev\Web\Burning-Man-Course-Project\BurningMan\BurningMan\Views\Manage\OrderHistory.cshtml"
                                        Write(itm.Amount);

#line default
#line hidden
#nullable disable
                WriteLiteral("</td>\r\n                                    </tr>\r\n");
#nullable restore
#line 45 "D:\Dev\Web\Burning-Man-Course-Project\BurningMan\BurningMan\Views\Manage\OrderHistory.cshtml"
                                }

                            

#line default
#line hidden
#nullable disable
                WriteLiteral(@"
                            



                            <tr role=""row"" class=""odd"">
                                <td class=""sorting_1"">Airi Satou</td>
                                <td>Accountant</td>
                                <td>Tokyo</td>
                                <td>33</td>
                                <td>2008/11/28</td>
                                <td>$162,700</td>
                            </tr>

                            <tr role=""row"" class=""odd"">
                                <td class=""sorting_1"">Ashton Cox</td>
                                <td>Junior Technical Author</td>
                                <td>San Francisco</td>
                                <td>66</td>
                                <td>2009/01/12</td>
                                <td>$86,000</td>
                            </tr>

                        </tbody>
                    </table>
");
                WriteLiteral(@"                </div>
            </div>
        </div>
    </div>
    <script src=""https://cpwebassets.codepen.io/assets/common/stopExecutionOnTimeout-157cd5b220a5c80d4ff8e0e70ac069bffd87a61252088146915e8726e5d9f147.js""></script>

    <script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js""></script>
    <script src=""https://cdn.datatables.net/1.10.7/js/jquery.dataTables.min.js""></script>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/materialize/0.97.0/js/materialize.min.js""></script>
    <script id=""rendered-js"">
        (function (window, document, undefined) {

            var factory = function ($, DataTable) {
                ""use strict"";

                $('.search-toggle').click(function () {
                    if ($('.hiddensearch').css('display') == 'none')
                        $('.hiddensearch').slideDown(); else

                        $('.hiddensearch').slideUp();
                });

                /* Set the defaults for DataTables ");
                WriteLiteral(@"initialisation */
                $.extend(true, DataTable.defaults, {
                    dom: ""<'hiddensearch'f'>"" +
                        ""tr"" +
                        ""<'table-footer'lip'>"",
                    renderer: 'material'
                });


                /* Default class modification */
                $.extend(DataTable.ext.classes, {
                    sWrapper: ""dataTables_wrapper"",
                    sFilterInput: ""form-control input-sm"",
                    sLengthSelect: ""form-control input-sm""
                });


                /* Bootstrap paging button renderer */
                DataTable.ext.renderer.pageButton.material = function (settings, host, idx, buttons, page, pages) {
                    var api = new DataTable.Api(settings);
                    var classes = settings.oClasses;
                    var lang = settings.oLanguage.oPaginate;
                    var btnDisplay, btnClass, counter = 0;

                    var attach = function (c");
                WriteLiteral(@"ontainer, buttons) {
                        var i, ien, node, button;
                        var clickHandler = function (e) {
                            e.preventDefault();
                            if (!$(e.currentTarget).hasClass('disabled')) {
                                api.page(e.data.action).draw(false);
                            }
                        };

                        for (i = 0, ien = buttons.length; i < ien; i++) {
                            if (window.CP.shouldStopExecution(0)) break;
                            button = buttons[i];

                            if ($.isArray(button)) {
                                attach(container, button);
                            } else {
                                btnDisplay = '';
                                btnClass = '';

                                switch (button) {

                                    case 'first':
                                        btnDisplay = lang.sFirst;
           ");
                WriteLiteral(@"                             btnClass = button + (page > 0 ?
                                            '' : ' disabled');
                                        break;

                                    case 'previous':
                                        btnDisplay = '<i class=""material-icons"">chevron_left</i>';
                                        btnClass = button + (page > 0 ?
                                            '' : ' disabled');
                                        break;

                                    case 'next':
                                        btnDisplay = '<i class=""material-icons"">chevron_right</i>';
                                        btnClass = button + (page < pages - 1 ?
                                            '' : ' disabled');
                                        break;

                                    case 'last':
                                        btnDisplay = lang.sLast;
                                        btnCl");
                WriteLiteral(@"ass = button + (page < pages - 1 ?
                                            '' : ' disabled');
                                        break;
                                }



                                if (btnDisplay) {
                                    node = $('<li>', {
                                        'class': classes.sPageButton + ' ' + btnClass,
                                        'id': idx === 0 && typeof button === 'string' ?
                                            settings.sTableId + '_' + button : null
                                    }).

                                        append($('<a>', {
                                            'href': '#',
                                            'aria-controls': settings.sTableId,
                                            'data-dt-idx': counter,
                                            'tabindex': settings.iTabIndex
                                        }).

                                 ");
                WriteLiteral(@"           html(btnDisplay)).

                                        appendTo(container);

                                    settings.oApi._fnBindAction(
                                        node, {
                                        action: button
                                    },
                                        clickHandler);


                                    counter++;
                                }
                            }
                        } window.CP.exitedLoop(0);
                    };

                    // IE9 throws an 'unknown error' if document.activeElement is used
                    // inside an iframe or frame.
                    var activeEl;

                    try {
                        // Because this approach is destroying and recreating the paging
                        // elements, focus is lost on the select button which is bad for
                        // accessibility. So we want to restore focus once the dr");
                WriteLiteral(@"aw has
                        // completed
                        activeEl = $(document.activeElement).data('dt-idx');
                    } catch (e) { }

                    attach(
                        $(host).empty().html('<ul class=""material-pagination""/>').children('ul'),
                        buttons);


                    if (activeEl) {
                        $(host).find('[data-dt-idx=' + activeEl + ']').focus();
                    }
                };

                /*
                 * TableTools Bootstrap compatibility
                 * Required TableTools 2.1+
                 */
                if (DataTable.TableTools) {
                    // Set the classes that TableTools uses to something suitable for Bootstrap
                    $.extend(true, DataTable.TableTools.classes, {
                        ""container"": ""DTTT btn-group"",
                        ""buttons"": {
                            ""normal"": ""btn btn-default"",
                            ");
                WriteLiteral(@"""disabled"": ""disabled""
                        },

                        ""collection"": {
                            ""container"": ""DTTT_dropdown dropdown-menu"",
                            ""buttons"": {
                                ""normal"": """",
                                ""disabled"": ""disabled""
                            }
                        },


                        ""print"": {
                            ""info"": ""DTTT_print_info""
                        },

                        ""select"": {
                            ""row"": ""active""
                        }
                    });



                    // Have the collection use a material compatible drop down
                    $.extend(true, DataTable.TableTools.DEFAULTS.oTags, {
                        ""collection"": {
                            ""container"": ""ul"",
                            ""button"": ""li"",
                            ""liner"": ""a""
                        }
                    });


");
                WriteLiteral(@"                }

            }; // /factory

            // Define as an AMD module if possible
            if (typeof define === 'function' && define.amd) {
                define(['jquery', 'datatables'], factory);
            } else if (typeof exports === 'object') {
                // Node/CommonJS
                factory(require('jquery'), require('datatables'));
            } else if (jQuery) {
                // Otherwise simply initialise as normal, stopping multiple evaluation
                factory(jQuery, jQuery.fn.dataTable);
            }

        })(window, document);

        $(document).ready(function () {
            $('#datatable').dataTable({
                ""oLanguage"": {
                    ""sStripClasses"": """",
                    ""sSearch"": """",
                    ""sSearchPlaceholder"": ""Enter Keywords Here"",
                    ""sInfo"": ""_START_ -_END_ of _TOTAL_"",
                    ""sLengthMenu"": '<span>Rows per page:</span><select class=""browser-default"">' ");
                WriteLiteral(@"+
                        '<option value=""10"">10</option>' +
                        '<option value=""20"">20</option>' +
                        '<option value=""30"">30</option>' +
                        '<option value=""40"">40</option>' +
                        '<option value=""50"">50</option>' +
                        '<option value=""-1"">All</option>' +
                        '</select></div>'
                },

                bAutoWidth: false
            });

        });
//# sourceURL=pen.js
    </script>







    <div class=""hiddendiv common""></div>
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<List<BurningMan.Models.Order>> Html { get; private set; }
    }
}
#pragma warning restore 1591
